import os

import torch
from nets.deeplabv3_training import (CE_Loss, Dice_loss, Focal_Loss,DiceLoss,softmax_mse_loss,
                                     weights_init)
from tqdm import tqdm

from utils.utils import get_lr

from utils.utils_metrics import f_score
import numpy as np
from torch.nn import functional as F
from PIL import Image
import random
from torch.nn import Softmax,LayerNorm
from torch import  nn
import torchvision.transforms as transforms
from utils.dataloader_unlabel import cutmix_images,SA

def get_adaptive_threshold(epoch, args):
    """计算自适应阈值"""
    if epoch < args['warm_up']:
        return args['threshold_warmup']
    else:
        # 线性增加阈值
        current = min(1., args['threshold'] + (epoch - args['warm_up']) / args['ramp_up'] * 0.2)
        return current

class AverageMeter(object):
    """计算并存储平均值和当前值"""
    def __init__(self):
        self.reset()

    def reset(self):
        self.val = 0
        self.avg = 0
        self.sum = 0
        self.count = 0

    def update(self, val, n=1):
        self.val = val
        self.sum += val * n
        self.count += n
        self.avg = self.sum / self.count

def apply_uniperb(images, eps):
    """
    应用UniPerb扰动
    Args:
        images: 输入图像
        eps: 扰动大小
    Returns:
        perturbed_images: 添加扰动后的图像
    """
    # 生成均匀分布的随机噪声
    noise = torch.empty_like(images).uniform_(-eps, eps)
    # 添加扰动
    perturbed_images = images + noise
    # 裁剪到合法范围
    perturbed_images = torch.clamp(perturbed_images, 0, 1)
    return perturbed_images

def fit_one_epoch(model_train, model,model_train_unlabel,ema_model, loss_history, eval_callback, optimizer, epoch, epoch_step, epoch_step_val,gen, gen_unlabel,gen_val, Epoch, cuda, dice_loss, focal_loss, cls_weights, num_classes, \
    fp16, scaler, save_period, save_dir, local_rank=0):
    total_loss      = 0
    suloss_item=0
    loss_u=0
    val_loss        = 0
    val_f_score     = 0
    args = {
        'threshold': 0.95,  # 置信度阈值
        'eps_uni': 0.02,  # 置信度阈值
        'align_alpha': 0.9,  # 类别分布对齐参数
        'lambda_u': 1.0,  # 无监督损失权重
        'lambda_c': 0.01,  # yicixing shunshi quanzhong
        'temperature':0.5,
    }
    if local_rank == 0:
        print('Start Train')
        pbar = tqdm(total=epoch_step,desc=f'Epoch {epoch + 1}/{Epoch}',postfix=dict,mininterval=0.3)
    dice_loss = DiceLoss(num_classes)
    criterion_u = nn.CrossEntropyLoss().cuda(local_rank)
    for iteration, ((imgs_label, pngs, labels),imgs_unlabel) in enumerate(zip(gen,gen_unlabel)):
        if iteration >= epoch_step: 
            break
        imgs_unlabel = imgs_unlabel
        with torch.no_grad():
            weights = torch.from_numpy(cls_weights)
            if cuda:
                imgs_unlabel_s = SA(imgs_unlabel, imgs_label)
                imgs_label = imgs_label.cuda(local_rank)
                imgs_unlabel    = imgs_unlabel.cuda(local_rank)
                imgs_unlabel_s = imgs_unlabel_s.cuda(local_rank)
                pngs = pngs.cuda(local_rank)
                labels = labels.cuda(local_rank)
                weights = weights.cuda(local_rank)

                model_train.eval()
                pred_u_pseudo = model_train(imgs_unlabel)
                pred_u_pseudo = pred_u_pseudo.detach()
                model_train.module.set_pseudo_prob_map(pred_u_pseudo)
                pseudo_label = pred_u_pseudo.argmax(dim=1)
                model_train.module.set_pseudo_label(pseudo_label)
        #----------------------#
        #   清零梯度
        #----------------------#
        optimizer.zero_grad()
        if fp16:
            # ----------------------#
            #
            # ----------------------#
            model_train.train()
            model_train_unlabel.train()
            num_lb, num_ulb = imgs_label.shape[0], imgs_unlabel_s.shape[0]
            outputs_total = model_train(torch.cat((imgs_label, imgs_unlabel_s)))
            outputs_label, outputs_unlabel = outputs_total.split([num_lb, num_ulb])
            #----------------------#
            #   监督学习
            #----------------------#
            if focal_loss:
                suloss = Focal_Loss(outputs_label, pngs, weights, num_classes = num_classes)
            else:
                suloss = CE_Loss(outputs_label, pngs, weights, num_classes = num_classes)

            if dice_loss:
                main_dice = Dice_loss(outputs_label, labels)
                suloss      = suloss + main_dice

            # ============= 双流扰动的核心实现 =============
            # 1. 弱扰动 - 用于生成伪标签
            imgs_unlabel_weak1 = imgs_unlabel  # 第一个弱增强视图
            imgs_unlabel_weak2 = imgs_unlabel +torch.clamp(torch.randn_like(imgs_unlabel) * 0.1, -0.2, 0.2) # 第二个弱增强视图
            imgs_unlabel_weak1 = imgs_unlabel_weak1.cuda(local_rank)
            imgs_unlabel_weak2 = imgs_unlabel_weak2.cuda(local_rank)
             # 2. 强扰动 - 用于学习
            imgs_unlabel_strong1, lam  = cutmix_images(imgs_unlabel, imgs_label, alpha=1.0)  # 第一个强增强视图
            imgs_unlabel_strong2, lam  = cutmix_images(imgs_unlabel, imgs_label, alpha=1.0)  # 第二个强增强视图
            imgs_unlabel_strong1 = imgs_unlabel_strong1.cuda(local_rank)
            imgs_unlabel_strong2 = imgs_unlabel_strong2.cuda(local_rank)
            # batch_size = imgs_label.shape[0]
            # 3.  UniPerb 扰动实现
            eps_uni = args['eps_uni']  # UniPerb扰动大小
            imgs_unlabel_weak1_uniperb = apply_uniperb(imgs_unlabel_weak1, eps_uni)
            imgs_unlabel_weak2_uniperb = apply_uniperb(imgs_unlabel_weak2, eps_uni)
            with torch.no_grad():
                # 弱扰动流的预测
                logits_weak1 = model_train(imgs_unlabel_weak1)
                logits_weak2 = model_train(imgs_unlabel_weak2)

                logits_weak1_p = model_train(imgs_unlabel_weak1_uniperb)
                logits_weak2_p = model_train(imgs_unlabel_weak2_uniperb)

                 # 集成两个弱扰动预测
                pseudo_logits = (logits_weak1 + logits_weak2) / 2
                pseudo_labels = torch.softmax(pseudo_logits.detach() / args['temperature'], dim=1)
                max_probs, targets_u = torch.max(pseudo_labels, dim=1)

                pseudo_logits_p = (logits_weak1_p + logits_weak2_p) / 2
                pseudo_labels_p = torch.softmax(pseudo_logits_p.detach() / args['temperature'], dim=1)
                max_probs_p, targets_u_p = torch.max(pseudo_labels_p, dim=1)

                # 类别分布对齐
                # probs_avg = torch.mean(pseudo_labels, dim=0)
                # exp_probs = torch.mean(torch.softmax(logits_label, dim=1), dim=0)
                # class_alignment = (1 - args['align_alpha']) * probs_avg + args['align_alpha'] * exp_probs

                # 自适应阈值
                confidence_threshold = get_adaptive_threshold(epoch, args)
                mask = max_probs.ge(confidence_threshold).float()

                confidence_threshold_p = get_adaptive_threshold(epoch, args)
                mask_p = max_probs_p.ge(confidence_threshold_p).float()

            # 强扰动流的预测
            logits_strong1 = model_train(imgs_unlabel_strong1)
            logits_strong2 = model_train(imgs_unlabel_strong2)

            # 计算强扰动流与伪标签之间的一致性损失
            loss_unsup_strong1 = criterion_u(logits_strong1, targets_u)
            loss_unsup_strong2 = criterion_u(logits_strong2, targets_u)

            loss_unsup_strong1_p = criterion_u(logits_strong1, targets_u_p)
            loss_unsup_strong2_p = criterion_u(logits_strong2, targets_u_p)

            # 双流之间的一致性损失
            loss_consistency = F.mse_loss(
                    torch.softmax(logits_strong1, dim=1),
                    torch.softmax(logits_strong2, dim=1)
                )

            # 总的无监督损失
            loss_unsupervised = (
                    (loss_unsup_strong1 + loss_unsup_strong2) * mask / 2 +
                    args['lambda_c'] * loss_consistency
            ).mean()

            loss_unsupervised_p = (
                (loss_unsup_strong1_p + loss_unsup_strong2_p) * mask_p / 2 +
                args['lambda_c'] * loss_consistency
            ).mean()

            ##########################

            #----------------------#
            #   计算损失
            #----------------------#
            loss = suloss +args['lambda_u'] * loss_unsupervised+args['lambda_u'] *loss_unsupervised_p
            #----------------------#
            #   反向传播
            #----------------------#
            loss.backward()
            optimizer.step()


        else:
            print('else')
        total_loss      += loss.item()
        suloss_item  += suloss.item()
        # consistency_loss_item+=consistency_loss.item()
        # attn_loss_item+=attn_loss.item()
        if local_rank == 0:
            pbar.set_postfix(**{'total_loss': total_loss / (iteration + 1),
                                'lr'        : get_lr(optimizer)})
            pbar.update(1)

    if local_rank == 0:
        pbar.close()
        print('Finish Train')
        print('Start Validation')
        pbar = tqdm(total=epoch_step_val, desc=f'Epoch {epoch + 1}/{Epoch}', postfix=dict, mininterval=0.3)
    model_train.eval()
    for iteration, batch in enumerate(gen_val):
        if iteration >= epoch_step_val:
            break
        imgs, pngs, labels = batch
        with torch.no_grad():
            weights = torch.from_numpy(cls_weights)
            if cuda:
                imgs = imgs.cuda(local_rank)
                pngs = pngs.cuda(local_rank)
                labels = labels.cuda(local_rank)
                weights = weights.cuda(local_rank)

            # ----------------------#
            #   前向传播
            # ----------------------#
            outputs = model_train(imgs)
            # ----------------------#
            #   计算损失
            # ----------------------#
            if focal_loss:
                loss = Focal_Loss(outputs, pngs, weights, num_classes=num_classes)
            else:
                loss = CE_Loss(outputs, pngs, weights, num_classes=num_classes)

            if dice_loss:
                main_dice = Dice_loss(outputs, labels)
                loss = loss + main_dice
            # -------------------------------#
            #   计算f_score
            # -------------------------------#
            _f_score = f_score(outputs, labels)

            val_loss += loss.item()
            val_f_score += _f_score.item()

            if local_rank == 0:
                pbar.set_postfix(**{'val_loss': val_loss / (iteration + 1),
                                    'f_score': val_f_score / (iteration + 1),
                                    'lr': get_lr(optimizer)})
                pbar.update(1)

    print('total Loss: %.6f' % (total_loss / epoch_step))
    if local_rank == 0:
        pbar.close()
        print('Finish Validation')
        loss_history.append_loss(epoch + 1, total_loss / epoch_step, val_loss / epoch_step_val)
        # eval_callback.on_epoch_end(epoch + 1, model_train)
        print('Epoch:'+ str(epoch + 1) + '/' + str(Epoch))
        print('su Loss: %.6f ||u Loss: %.6f || Total Loss: %.6f ||Val Loss: %.3f ' % (suloss_item / epoch_step, loss_u / epoch_step, total_loss / epoch_step, val_loss / epoch_step_val))


        # -----------------------------------------------#
        #   保存权值
        # -----------------------------------------------#
        if (epoch + 1) % save_period == 0 or epoch + 1 == Epoch:
            torch.save(model.state_dict(), os.path.join(save_dir, 'ep%03d-loss%.3f-val_loss%.3f.pth' % (epoch + 1, total_loss / epoch_step, val_loss / epoch_step_val)))

        if len(loss_history.val_loss) <= 1 or (val_loss / epoch_step_val) <= min(loss_history.val_loss):
            print('Save best model to best_epoch_weights.pth')
            torch.save(model.state_dict(), os.path.join(save_dir, "best_epoch_weights.pth"))

        torch.save(model.state_dict(), os.path.join(save_dir, "last_epoch_weights.pth"))
